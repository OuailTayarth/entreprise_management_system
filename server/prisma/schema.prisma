
// TODO: add the DATABASe URL
generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üë§ EMPLOYEE
model Employee {
  id                Int       @id @default(autoincrement())
  cognitoId         String    @unique
  username          String    @unique
  email             String    @unique
  firstName         String
  lastName          String
  profilePictureUrl String?
  jobTitle          String?
  startDate         DateTime
  endDate           DateTime?
  employmentType    String?
  leaveBalance      Float     @default(20.0)
  departmentId      Int?
  teamId            Int?

  department Department? @relation(fields: [departmentId], references: [id])
  team       Team?       @relation(fields: [teamId], references: [id])

  documents       Document[]
  leaves          Leave[]
  onboardingTasks OnboardingTask[]
  uploadedDocs    Document[] @relation("Uploader")
  managerAssignments DepartmentManager[]
}

// üè¢ DEPARTMENT ‚Äî e.g., Engineering, Marketing, HR
model Department {
  id    Int    @id @default(autoincrement())
  name  String @unique
  teams Team[]
  employees Employee[]
  managers  DepartmentManager[]
}


// üë• TEAM ‚Äî e.g., Frontend, AI Research, Growth
model Team {
  id           Int    @id @default(autoincrement())
  name         String
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  employees    Employee[]
  
}

model DepartmentManager {    
  id           Int      @id @default(autoincrement())
  departmentId Int
  employeeId   Int
  from         DateTime @default(now())
  to           DateTime?

  department Department @relation(fields: [departmentId], references: [id])
  employee   Employee   @relation(fields: [employeeId], references: [id])

  @@unique([departmentId, to])         
}

// üìÑ DOCUMENT ‚Äî Contracts, NDAs, Offer Letters
model Document {
  id           Int      @id @default(autoincrement())
  title        String
  fileURL      String
  type         String
  signed       Boolean  @default(false)
  signedAt     DateTime?
  uploadedById Int
  employeeId   Int
  uploadedBy   Employee @relation("Uploader", fields: [uploadedById], references: [id])
  employee     Employee @relation(fields: [employeeId], references: [id])
}



// üõå LEAVE ‚Äî Sick, Parental, Vacation
model Leave {
  id         Int      @id @default(autoincrement())
  type       String
  startDate  DateTime
  endDate    DateTime
  status     String   @default("PENDING")
  reason     String?
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
}

// ‚úÖ ONBOARDING TASK ‚Äî Checklist for new hires
model OnboardingTask {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean  @default(false)
  completedAt DateTime?
  assigneeId  Int
  assignee    Employee @relation(fields: [assigneeId], references: [id])
}
